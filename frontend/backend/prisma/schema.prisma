generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PlotStatus {
  active
  deleted
}

enum SensorKind {
  temperature
  humidity
  rain
  solar
}

model Role {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  users UserRole[]

  @@map("roles")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  roles        UserRole[]
  plots        Plot[]    @relation("UserPlots")

  @@map("users")
}

model UserRole {
  userId Int @map("user_id")
  roleId Int @map("role_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Crop {
  id    Int    @id @default(autoincrement())
  name  String @unique
  plots Plot[]

  @@map("crops")
}

model Plot {
  id            Int        @id @default(autoincrement())
  name          String
  lat           Decimal    @db.Decimal(9, 6)
  lng           Decimal    @db.Decimal(9, 6)
  areaHa        Decimal    @default(0) @db.Decimal(10, 2) @map("area_ha")
  status        PlotStatus @default(active)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  deletedAt     DateTime?  @map("deleted_at")
  cropId        Int?       @map("crop_id")
  crop          Crop?      @relation(fields: [cropId], references: [id], onDelete: SetNull)
  responsibleId Int?       @map("responsible_id")
  responsible   User?      @relation("UserPlots", fields: [responsibleId], references: [id], onDelete: SetNull)
  plotSensors   PlotSensor[]

  @@index([status])
  @@index([cropId])
  @@index([responsibleId])
  @@map("plots")
}

model Sensor {
  id        Int         @id @default(autoincrement())
  kind      SensorKind
  unit      String
  isActive  Boolean     @default(true) @map("is_active")
  plotLinks PlotSensor[]

  @@map("sensors")
}

model PlotSensor {
  plotId      Int      @map("plot_id")
  sensorId    Int      @map("sensor_id")
  installedAt DateTime @default(now()) @map("installed_at")
  isActive    Boolean  @default(true) @map("is_active")
  plot        Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)
  sensor      Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)

  @@id([plotId, sensorId])
  @@map("plot_sensors")
}
